version: 2.1
parameters:
  CIRCLE_PR_NUMBER:
    type: integer
    default: 0
  CIRCLE_PR_USERNAME:
    type: string
    default: ""
jobs:
  validate:
    machine: true
    steps:
      - checkout
      - run: git diff --dirstat=0 origin/master..HEAD | awk '{print $2}' | grep -e '^[0-9]\+-' | sed 's/.$//' | grep -v / > .circleci/tasks.txt || true
      - run: |
          if [[ ! -s .circleci/tasks.txt ]]; then
            echo "Invalid submission; evaluable change not found"
            circleci step halt
          fi
      - run: |
          for f in $(cat .circleci/tasks.txt); do
            if [[ ! -f ${f}/Makefile ]]; then
              echo "Invalid submission; Makefile not found"
              exit 1
            fi
          done
      - persist_to_workspace:
          root: .
          paths: .circleci
  evaluate:
    docker:
      - image: openrm/gcloud-sdk:hackathon-2020-01
    steps:
      - attach_workspace:
          at: /tmp
      - run: |
          if [[ ! -f /tmp/.circleci/tasks.txt ]]; then
            circleci step halt
          fi
      - checkout
      - run:
          name: Activate GCP service account
          command: |
            apt-get install -qq -y gettext
            echo $GCP_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project $GCP_PROJECT_ID
      - run: |
          for task in $(cat /tmp/.circleci/tasks.txt); do
            cd ~/project/${task}

            task_upper=$(echo ${task##*-} | awk '{print toupper($0)}')
            var_data="DATA_URI_PATTERN_${task_upper}"

            mkdir -p data/test
            gsutil -qm cp ${!var_data} data/test/
            make > prediction.csv
          done
      - run: |
          export CIRCLE_PR_NUMBER=<< pipeline.parameters.CIRCLE_PR_NUMBER >>
          export CIRCLE_PR_USERNAME=<< pipeline.parameters.CIRCLE_PR_USERNAME >>

          for task in $(cat /tmp/.circleci/tasks.txt); do
            cd ~/project/${task}

            task_id=${task##*-}
            task_upper=$(echo ${task_id} | awk '{print toupper($0)}')
            var_labels="LABELS_URI_${task_upper}"

            gsutil -q cp ${!var_labels} ground_truth.csv
            metrics=$(python /tmp/.circleci/scripts/evaluate_${task_id}.py prediction.csv ground_truth.csv)
            score=$(echo $metrics | jq '.score')
            curl --fail ${API_ORIGIN}/metrics --data "{\"competitor\":\"${CIRCLE_PR_USERNAME}\",\"competition\":\"${CIRCLE_PROJECT_REPONAME}/${task_id}\",\"score\":${score},\"details\":$(echo $metrics | jq -c 'del(.score)')}" -H 'Content-Type: application/json' -H "Authorization: Bearer ${API_SECRET_TOKEN}"
            echo ${metrics} | python /tmp/.circleci/scripts/comment_pr.py ${task_id}
          done
workflows:
  version: 2
  submission:
    jobs:
      - validate
      - evaluate:
          context: hackathon
          requires:
            - validate
